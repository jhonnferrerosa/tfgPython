openapi: 3.1.0
info:
  title: API demostraciones roboticas. 
  description: API que utiliza Kodular para gestionar a las personas que quieran controlar un robot.
  version: 1.0.0

servers:
  - url: http://localhost:5000
    description: el servidor esta montado en local. 

paths:
  /{idEvento}:
    get:
      summary:  primer acceso. 
      description: en este endpoint los usuarios se registran dentro de las demostraciones roboticas, ademas se busca un robot para ese usuario, puede ser que devuelva un JSON con un robot que ha encontrado o que de vuelva un JSON con un aviso de que está esperando por un robot.
      parameters:
        - name: idEvento
          in: path
          description: "este es el entero que se refiera al evento al que va a entrar el asistente."
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: devuelve un JSON con el id del robot que está listo para trabajar. 
          content:
            application/json:
              schema:
                type: object
                properties:
                  estadoActual:
                    type: string
                  idRobot:
                    type: integer
                  macAddressDelRobot:
                    type: string
  /aceptarrobot:
    post:
      summary: opción de empezar a manejar un robot. 
      description: en el caso de que un usuario acepte el robot que se le ha mostrado, pulsará aceptar en la aplcación de Kodular y entonces enviará un JSON con el evento y el robot al que quiera manejar. Sólo puede de volver un JSON que dice que se está manajando un robot, en el caso de que devuelva cualquier otra respuesta, eso significa que el robot que se ha acaptado, por alguna razón ya no está disponible, y esto se debe a que internamente este primer endpoint ha tendido que llamar al primero para hacer la búsqueda de un nuevo robot. 
      requestBody:
        description: se va a aneviar a la API un JSON con el idEvento y el idRobot del robot que se quiere manejar. 
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                idRobot:
                  type: integer
                idEvento:
                  type: integer
      responses:
        '200':
          description: devuelve un JSON con el id del robot, la mac y un String que avisa que en la aplicación está registrado que ya está manejando ese robot. 
          content:
            application/json:
              schema:
                type: object
                properties:
                  estadoActual:
                    type: string
                  idRobot:
                    type: integer
                  macAddressDelRobot:
                    type: string
  /rechazarrobot/{idRobot}/{idEvento}:
    get:
      summary: esta es la opción de rechazar un robot mostrado.
      description: al usuario se le ha mostrado un robot por pantalla y este tiene la opción de rechalo, ya que puedde ser que esté esperando por uno en concreto. En este caso se ejecutará el método GET que tendrá como parametros el id del robot y el id del evento que no acepta manejar. Al asistente se le devera el resultado de cualquiera de los dos endpoint anteriores, aceptarrobot /idEvento y será un JSON que le muestre otro robot disponible o un mensaje en el que se le avise que está esperando por un robot.
      parameters:
        - name: idRobot
          in: path
          description: este es el campo que se refiere al robot.
          required: true
          schema:
            type: integer
        - name: idEvento
          in: path
          description: este es el campo que se refiere al evento. 
          required: true
          schema:
            type:
              integer
      responses:
        '200':
          description: devuelve un JSON con el id del robot, la mac y un String que avisa si esta esperando por al gun robot o puede aceptar ese que se le está mostrando. 
          content:
            application/json:
              schema:
                type: object
                properties:
                  estadoActual:
                    type: string
                  idRobot:
                    type: integer
                  macAddressDelRobot:
                    type: string
          